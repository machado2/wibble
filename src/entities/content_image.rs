//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "content_image")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub content_id: String,
    pub prompt_hash: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub prompt: String,
    pub alt_text: String,
    pub created_at: DateTime,
    pub flagged: bool,
    pub regenerate: bool,
    pub fail_count: i32,
    pub generator: Option<String>,
    pub model: Option<String>,
    pub seed: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub parameters: Option<String>,
    pub view_count: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::content::Entity",
        from = "Column::ContentId",
        to = "super::content::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Content,
}

impl Related<super::content::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Content.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
