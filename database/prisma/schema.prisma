generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model content {
  id                      String          @id @db.Char(36)
  slug                    String          @unique @db.VarChar(500)
  content                 String?
  created_at              DateTime        @default(now()) @db.Timestamp(6)
  generating              Boolean         @default(true)
  generation_started_at   DateTime?       @db.Timestamp(6)
  generation_finished_at  DateTime?       @db.Timestamp(6)
  flagged                 Boolean
  model                   String          @db.VarChar(100)
  prompt_version          Int             @default(1)
  fail_count              Int             @default(0)
  description             String
  image_id                String?         @db.VarChar(100)
  title                   String          @db.VarChar(500)
  user_input              String
  // view_count removed (redundant with click_count)
  image_prompt            String?         @db.VarChar(1000)
  user_email              String?         @db.VarChar(350)
  votes                   Int             @default(0)
  hot_score               Float           @default(100)
  generation_time_ms      Int?
  flarum_id               Int?
  markdown                String?
  converted               Boolean         @default(false)
  // lemmy-related fields removed
  longview_count          Int             @default(0)
  // umami_view_count removed
  impression_count        Int             @default(0)
  click_count             Int             @default(0)
  json_content            String?
  language_id             String?         @db.Char(36)
  content_image           content_image[]
  content_vote            content_vote[]
 
  @@index([created_at, generating], map: "idx_content_created_at_generating")
  @@index([hot_score], map: "idx_content_hot_score")
}

model content_image {
  id          String   @id @db.VarChar(100)
  content_id  String   @db.VarChar(36)
  prompt_hash String?  @db.VarChar(100)
  prompt      String
  alt_text    String   @db.VarChar(1000)
  created_at  DateTime @db.Timestamp(6)
  flagged     Boolean  @default(false)
  regenerate  Boolean  @default(false)
  fail_count  Int      @default(0)
  generator   String?  @db.VarChar(100)
  model       String?  @db.VarChar(100)
  seed        String?  @db.VarChar(20)
  parameters  String?
  view_count  Int      @default(0)
  content     content  @relation(fields: [content_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([content_id, prompt_hash])
  @@index([content_id, prompt_hash])
  @@index([created_at])
  @@index([view_count])
}

model content_proposal {
  id          String    @id @db.Char(36)
  ip_address  String    @db.VarChar(100)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  flagged     Boolean   @default(false)
  model       String    @db.VarChar(100)
  user_input  String
  title       String    @db.VarChar(500)
  description String
  approved_at DateTime? @db.Timestamp(6)
  approved_by String?   @db.VarChar(100)
}

model content_vote {
  content_id String   @db.VarChar(36)
  created_at DateTime @default(now()) @db.Timestamp(6)
  user_email String   @db.VarChar(350)
  downvote   Boolean  @default(false)
  content    content  @relation(fields: [content_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([content_id, user_email])
}

model examples {
  id          String  @db.Char(36)
  user_input  String
  title       String  @db.VarChar(500)
  description String
  content     String?
  new_id      Int     @id @default(autoincrement())

  @@index([id], map: "idx_uuid")
}

model generation_schedule {
  id       String   @id @db.VarChar(100)
  next_run DateTime @db.Timestamp(6)
}

model gpt_log {
  id         String   @id @db.VarChar(100)
  message    String
  flagged    Boolean  @default(false)
  response   String?
  error      String?
  tokens     Int
  created_at DateTime @default(now()) @db.Timestamp(6)

  @@index([created_at])
}

model history_generation_fail {
  id         String   @id @db.VarChar(100)
  slug       String   @db.VarChar(500)
  created_at DateTime @db.Timestamp(6)
  reason     String?  @db.VarChar(1000)
  exception  String?
  content    String?

  @@index([created_at])
}

model horde_log {
  id         String   @id @db.VarChar(100)
  message    String
  flagged    Boolean  @default(false)
  response   String?
  error      String?
  kudos      Int
  created_at DateTime @default(now()) @db.Timestamp(6)

  @@index([created_at])
}

model image_file {
  id        String @id @db.VarChar(100)
  file_path String
}

model language {
  id          String        @id @db.Char(36)
  name        String        @unique @db.VarChar(500)
  translation translation[]
}

model search_history {
  id           String   @id @db.VarChar(36)
  term         String   @db.VarChar(1000)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  result_count Int

  @@index([result_count, created_at], map: "idx_search_result_count_created_at")
}

model translation {
  id           String   @id @db.VarChar(36)
  english_hash String   @db.VarChar(100)
  lang_id      String   @db.VarChar(100)
  translation  String
  language     language @relation(fields: [lang_id], references: [id], onUpdate: NoAction)
}
